#!/bin/bash
#
# psx-bios-package - build a Debian package of psx-bios
#
# Copyright © 2014-2016 Frédéric Brière <fbriere@fbriere.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

VERSION=6

# https://github.com/petrockblog/RetroPie-Setup/wiki/PCSX-Core-Playstation-1
# http://en.wikipedia.org/wiki/PlayStation_models
#
# TODO: Handle models with multiple versions (SCPH-1002 & SCPH-102)
KNOWN_MODELS="
	# PlayStation
	239665b1a3dade1b5a52c06338011044   1.0  J  1994-09-22   SCPH-1000  DTL-H1000
	849515939161e62f6b866f6853006780   1.1  J  1995-01-22   SCPH-3000  DTL-H1000H
	dc2b9bf8da62ec93e868cfd29f0d067d   2.0  A  1995-05-07              DTL-H1001
	54847e693405ffeb0359c6287434cbef   2.0  E  1995-05-10   SCPH-1002  DTL-H1002
	cba733ceeff5aef5c32254f1d617fa62   2.1  J  1995-07-17   SCPH-3500
	da27e8b6dab242d8f91a9b25d80c63b8   2.1  A  1995-07-17              DTL-H1101
	417b34706319da7cf001e76e40136c23   2.1  E  1995-07-17   SCPH-1002  DTL-H1102
	57a06303dfa9cf9351222dfcbb4a29d9   2.2  J  1995-12-04   SCPH-5000  DTL-H1200  DTL-H3000
	924e392ed05558ffdb115408c263dccf   2.2  A  1995-12-04   SCPH-1001  DTL-H1201  DTL-H3001
	e2110b8a2b97a8e0b857a45d32f7e187   2.2  E  1995-12-04   SCPH-1002  DTL-H1202  DTL-H3002
	ca5cfc321f916756e3f0effbfaeba13b   2.2  D  1996-03-06              DTL-H1100
	8dd7d5296a650fac7319bce665a6a53c   3.0  J  1996-09-09   SCPH-5500
	490f666e1afb15b7362b406ed1cea246   3.0  A  1996-11-18   SCPH-5501  SCPH-5503  SCPH-7003
	32736f17079d0b2b7024407c39bd3050   3.0  E  1997-01-06   SCPH-5502  SCPH-5552
	8e4c14f567745eff2f0408c8129f72a6   4.0  J  1997-08-18   SCPH-7000  SCPH-7500  SCPH-9000
	1e68c231d0896b7eadcad1d7d8e76129   4.1  A  1997-12-16   SCPH-7001  SCPH-7501  SCPH-7503  SCPH-9001  SCPH-9003  SCPH-9903
	b9d9a0286c33dc6b7237bb13cd46fdee   4.1  E  1997-12-16   SCPH-7002  SCPH-7502  SCPH-9002

	# PSone
	8abc1b549a4a80954addc48ef02c4521   4.3  J  2000-03-11   SCPH-100
	b10f5e0e3d9eb60e5159690680b1e774   4.4  E  2000-03-24   SCPH-102
	6e3735ff4c7dc899ee98981385f6f3d0   4.5  A  2000-05-25   SCPH-101
	de93caec13d1a141a40a79f5c86168d6   4.5  E  2000-05-25   SCPH-102
	#            ?                      ?   ?       ?       SCPH-103

	#            ?                      ?   A       ?       SCPH-5001
	#            ?                      ?   E       ?       SCPH-5002
	#            ?                      ?   J       ?       SCPH-5003
	#            ?                      ?   J       ?       SCPH-5903

	# http://www.psxdev.net/forum/viewtopic.php?f=54&t=570
	2118230527a9f51bd9216e32fa912842    ?   ?  1994-07-27(?)  DTL-H2000
	#            ?                      ?   ?       ?       DTL-H2500
	#            ?                      ?   ?       ?       DTL-H2700

	# eb201d2d98251a598af467d4347bb62f is a corrupt version of SCPH-5000
	# e56ec1b027e2fe8a49217d9678f7f6bb is a corrupt version of SCPH-5502
"

BIOS_SIZE=524288


usage() {
	cat <<EOF
Usage: $0 [ <options> ... ] [ --model ] { <filename> | <url> } [...]

Options:
  --fullname <name>            Full name in Maintainer field  [$OPT_FULLNAME]
  --email <email>              Email address in Maintainer field  [$OPT_EMAIL]
  --package-append <string>    Append to the package name  [<model> or "-multi"]
  --revision-append <string>   Append to the revision number  [$OPT_REVISION_APPEND]
  --compress-type <type>       Compression type of resulting package  [$OPT_COMPRESS_TYPE]
  --compress-level <level>     Compression level of resulting package  [${OPT_COMPRESS_LEVEL:-<default>}]

  --model <model>              PlayStation model name  [<none>]

  --force                      Override safety checks

  --help                       Show this help message
  --version                    Show the version.
EOF
}

# Set default args early on -- they may be displayed in usage()
set_default_args() {
	# (This is mostly copied from googleearth-package)
	local SYS_MAILNAME="$(cat /etc/mailname 2>/dev/null)"
	OPT_FULLNAME="${DEBFULLNAME:-${NAME:-$(getent passwd "$(whoami)" | cut -d ':' -f 5 | cut -d ',' -f 1)}}"
	OPT_EMAIL="${DEBEMAIL:-${EMAIL:-$(whoami)@${SYS_MAILNAME:-$(hostname --fqdn)}}}"

	OPT_REVISION_APPEND="+local"

	# The resulting package will typically be installed right away, so
	# there's no need to resort to the much slower xz compression type.
	OPT_COMPRESS_TYPE=gzip
	OPT_COMPRESS_LEVEL=
}

# Process command-line arguments, setting $OPT_* variables
parse_args() {
	# Much easier than messing around with eval set --
	declare -a -g OPT_SOURCES OPT_SOURCES_MODEL

	local ARG

	while [ $# -gt 0 ]; do
		ARG="$1"
		shift

		case "$ARG" in
			--fullname)
				OPT_FULLNAME="$1"
				shift
				;;
			--email)
				OPT_EMAIL="$1"
				shift
				;;
			--revision-append)
				OPT_REVISION_APPEND="$1"
				shift
				;;
			--compress-type)
				OPT_COMPRESS_TYPE="$1"
				shift
				case "$OPT_COMPRESS_TYPE" in
					gzip|xz|bzip2|lzma|none) true ;;
					*)
						echo "Unknown compression type $OPT_COMPRESS_TYPE" >&2
						if [ "$OPT_FORCE" = true ]; then
							echo "Ignoring as requested by --force" >&2
						else
							exit 1
						fi
						;;
				esac
				;;
			--compress-level)
				OPT_COMPRESS_LEVEL="$1"
				shift
				;;
			--model)
				OPT_MODEL="$1"
				shift
				;;
			--package-append)
				OPT_PKGNAME_APPEND="$1"
				shift
				;;
			--force)
				OPT_FORCE=true
				;;
			--help)
				usage
				exit 0
				;;
			--version)
				echo "make-eawpatches-package version $VERSION"
				exit 0
				;;
			--*)
				echo "$0: unknown option $ARG" >&2
				echo "Try '$0 --help' for more information." >&2
				exit 1
				;;
			*)
				OPT_SOURCES=( "${OPT_SOURCES[@]}" "$ARG" )
				OPT_SOURCES_MODEL=( "${OPT_SOURCES_MODEL[@]}" "$OPT_MODEL" )
				unset OPT_MODEL
				;;
		esac
	done

	if [ ${#OPT_SOURCES[@]} -eq 0 ]; then
		usage >&2
		exit 1
	fi
}

# Inspired by googleearth-package
verify_sanity() {
	if [ $(id --user) -eq 0 ]; then
		echo 'Refusing to run as root; use --force to override.' >&2
		return 1
	fi

	if [ -u . -o -g . ]; then
		echo 'Refusing to build in a setuid/setgid directory; use --force to override.' >&2
		return 1
	fi
}

# Set up download() - download <url> <output-file>
if which wget > /dev/null; then
	download() {
		wget "$1" -O "$2" || return 1
	}
elif which curl > /dev/null; then
	download() {
		curl "$1" -o "$2" || return 1
	}
else
	download() {
		echo 'Either wget or curl is required to download the requested URL.' >&2
		echo '(Or you can download it yourself and point to it.)' >&2
		exit 1
	}
fi

# Package names may only contain lower case letters, digits, "+", "-" and ".".
# We also don't want filenames starting with a non-alnum character.
sanitize_name() {
	echo "$1" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]+.-' | sed 's/[^[:alnum:]]\+//'
}

# Check the MD5 of a file against known values
get_model() {
	echo "$KNOWN_MODELS" |\
		sed 's/^\s\+//' |\
		sed 's/\s\+/ /g' |\
		egrep -v '^(#|$)' |\
		grep "^$(md5sum "$1" | cut -d ' ' -f 1)" |\
		cut -d ' ' -f 5
}

# Extract the contents of a (possible) archive
extract() {
	local FILE="$1" DEST="$2"
	shift 2

	# --test-label does not appear to work  :(
	if tar -t -f "$FILE" >/dev/null 2>&1; then
		tar x -f "$FILE" -C "$DEST"
	elif zipinfo -h "$FILE" >/dev/null 2>&1; then
		unzip -q "$FILE" -d "$DEST"
	else
		return 1
	fi
}

# Directory where we will find our misc. files
misc_dir() {
	local SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

	if [ "$SCRIPT_DIR" = "/usr/bin" ]; then
		# We are running from an installed Debian package
		echo "/usr/share/psx-bios-package"
	elif [ -d "$SCRIPT_DIR/debian" -a -d "$SCRIPT_DIR/psx-bios" ]; then
		# We appear to be running from the unpacked source
		echo "$SCRIPT_DIR/psx-bios"
	else
		echo "$0: Unable to find misc. files directory" >&2
		return 1
	fi
}

process_file() {
	local WORK_DIR="$1" FILENAME="$2" MODEL="$3" RECURSIVE="$4"
	shift 3  # 4th argument is optional

	if [ ! "$RECURSIVE" ] && mkdir -p "$WORK_DIR/tmp" \
		&& extract "$FILENAME" "$WORK_DIR/tmp"
	then
		if [ "$MODEL" ]; then
			# TODO: Maybe allow --model if only one image is found
			echo "--model cannot be used with an archive file" >&2
			exit 1
		fi
		FOUND=
		find "$WORK_DIR/tmp" -type f -size ${BIOS_SIZE}c | {
			# Keep in mind that the pipe created a subshell
			FOUND=
			while read FILENAME; do
				process_file "$WORK_DIR" "$FILENAME" "$MODEL" "recursive" \
					&& FOUND=true
			done
			[ "$FOUND" = true ]
		} && FOUND=true
		if [ ! "$FOUND" ]; then
			echo "Could not find any images in $FILENAME" >&2
			exit 1
		fi
		rm -rf "$WORK_DIR/tmp"
	else
		local REAL_MODEL="$(get_model "$FILENAME")"
		if [ ! "$REAL_MODEL" ]; then
			if [ ! "$RECURSIVE" ]; then
				echo "Cannot determine model for $FILENAME" >&2
				if [ "$OPT_FORCE" = true -a "$MODEL" ]; then
					echo "Overriding as requested by --force" >&2
				else
					return 1
				fi
			else
				return 1
			fi
		fi
		if [ ! "$MODEL" ]; then
			MODEL="$REAL_MODEL"
		fi
		LAST_MODEL="$MODEL"
		cp "$FILENAME" "$WORK_DIR/images/$(sanitize_name "$MODEL").bin"
	fi
}

process_url() {
	local WORK_DIR="$1" URL="$2" MODEL="$3"
	shift 3

	case "$URL" in
		*.zip | *.ZIP)
			if [ ! "$(which unzip)" -a "$OPT_FORCE" != true ]; then
				echo "Not downloading <$URL>: unzip not available; use --force to override" >&2
				return 1
			fi
			;;
	esac

	download "$URL" "$WORK_DIR/tmp.bin" \
		&& process_file "$WORK_DIR" "$WORK_DIR/tmp.bin" "$MODEL"
}

process() {
	local WORK_DIR="$1" ARG="$2" MODEL="$3"
	shift 3

	case "$ARG" in
		http://* | ftp://*)
			process_url "$WORK_DIR" "$ARG" "$MODEL"
			;;
		*)
			if [ ! -f "$ARG" ]; then
				echo "$0: $ARG: No such file" >&2
				return 1
			fi
			process_file "$WORK_DIR" "$ARG" "$MODEL"
			;;
	esac
}



# Build the filesystem tree for our binary package from an unpacked archive.
build_deb_tree() {
	local SRC="$1" DEST="$2"
	shift 2

	local ONLY_MODEL
	if [ $(ls "$SRC"/* | wc -l) -eq 1 ]; then
		ONLY_MODEL="$LAST_MODEL"
	fi

	if [ -z "$OPT_PKGNAME_APPEND" ]; then
		if [ "$ONLY_MODEL" ]; then
			OPT_PKGNAME_APPEND="-$(sanitize_name "$ONLY_MODEL")"
		else
			OPT_PKGNAME_APPEND="-multi"
		fi
	fi

	local PKGNAME="psx-bios${OPT_PKGNAME_APPEND}"

	# Some additional files that we'll need
	local SHARE="$(misc_dir)"
	# We'll refer to this directory a lot
	local DOC="$DEST/usr/share/doc/${PKGNAME}"

	mkdir -p "$DEST/usr/share/psemu/bios"
	cp "$SRC"/* "$DEST/usr/share/psemu/bios/"

	# Documentation (under /usr/share/doc/psx-bios[-append])
	mkdir -p "$DOC"
	cp "$SHARE/copyright" "$DOC/"
	if [ -e "$SHARE/../debian/changelog" ]; then
		gzip -9 -c --no-name "$SHARE/../debian/changelog" > "$DOC/changelog.Debian.gz"
	else
		# Borrow the Debian changelog from psx-bios-package
		cp /usr/share/doc/psx-bios-package/changelog.gz "$DOC/changelog.Debian.gz"
	fi
	# Finally, compress anything over 4 KiB (except copyright)
	find "$DOC" -size +4k \! -name 'copyright' \! -name '*.gz' -print0 \
		| xargs -0 --no-run-if-empty gzip -9 --no-name

	# DEBIAN directory
	mkdir -p "$DEST/DEBIAN"

	# debian/control substitution variables
	local -A CONTROL_VARS=(
		['local:Maintainer']="${OPT_FULLNAME} <${OPT_EMAIL}>"
		['local:Package-Append']="${OPT_PKGNAME_APPEND}"
		['local:Revision-Append']="${OPT_REVISION_APPEND}"
		['local:Installed-Size']="$(du -k -s --apparent-size "$DEST" | cut -f1)"
	)
	if [ "$ONLY_MODEL" ]; then
		CONTROL_VARS['local:Model']="${ONLY_MODEL}"
	fi
	if [ -e "$SHARE/../debian/changelog" ]; then
		# This is very hackish, but we cannot rely on
		# dpkg-parsechangelog to be available  :(
		CONTROL_VARS['local:Revision']="$(sed -n '1 s/.*(\(.*\)).*/\1/p' "$SHARE/../debian/changelog")"
	fi

	# debian/control itself
	local CONTROL
	if [ "$ONLY_MODEL" ]; then
		CONTROL=$(< "$SHARE/control")
	else
		CONTROL=$(< "$SHARE/control.multi")
	fi
	for VARNAME in "${!CONTROL_VARS[@]}"; do
		CONTROL="${CONTROL//"\${$VARNAME}"/"${CONTROL_VARS["$VARNAME"]}"}"
	done
	cat <<<"$CONTROL" > "$DEST/DEBIAN/control"

	# Generate md5sums (which must be relative to $DEST)
	(cd "$DEST" && find . -type f \! -regex './\(DEBIAN\|etc\)/.*' -printf '%P\0' \
		| LC_ALL=C sort --zero-terminated \
		| xargs -0 md5sum) > "$DEST/DEBIAN/md5sums"

	# Fix permissions
	find "$DEST" -type f -print0 | xargs -0 chmod 644
	find "$DEST" -type d -print0 | xargs -0 chmod 755
}

main() {
	set_default_args
	parse_args "$@"
	[ "$OPT_FORCE" != true ] && verify_sanity

	# Make sure the directory exists before going any further
	misc_dir >/dev/null

	# Temporary workspace
	local WORK_DIR="$(mktemp --directory --tmpdir)"
	trap "rm -rf '$WORK_DIR'" EXIT

	local LAST_MODEL
	mkdir -p "$WORK_DIR/images"
	for SOURCE in "${OPT_SOURCES[@]}"; do
		if ! process "$WORK_DIR" "$SOURCE" "${OPT_SOURCES_MODEL[0]}"; then
			echo "Cannot process $SOURCE" >&2
			exit 1
		fi
		unset OPT_SOURCES_MODEL[0]
		OPT_SOURCES_MODEL=( "${OPT_SOURCES_MODEL[@]}" )
	done

	if ! ls "$WORK_DIR/images/" >/dev/null 2>&1; then
		echo "No images found" >&2
		exit 1
	fi

	mkdir -p "$WORK_DIR/build"
	build_deb_tree "$WORK_DIR/images" "$WORK_DIR/build"

	fakeroot dpkg-deb --build \
		-Z${OPT_COMPRESS_TYPE} \
		${OPT_COMPRESS_LEVEL:+-z$OPT_COMPRESS_LEVEL} \
		"$WORK_DIR/build" .

	rm -rf "$WORK_DIR"
	trap - EXIT
}

main "$@"
